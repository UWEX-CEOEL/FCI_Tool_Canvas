<?xml version="1.0" encoding="utf-8"?>
<!--
- phpMyAdmin XML Dump
- version 4.8.4
- https://www.phpmyadmin.net
-
- Host: localhost:3306
- Generation Time: Jun 18, 2019 at 04:00 PM
- Server version: 5.7.26-log
- PHP Version: 7.1.14
-->

<pma_xml_export version="1.0" xmlns:pma="https://www.phpmyadmin.net/some_doc_url/">
    <!--
    - Structure schemas
    -->
    <pma:structure_schemas>
        <pma:database name="tsugi" collation="utf8_general_ci" charset="utf8">
            <pma:table name="attend">
                CREATE TABLE `attend` (
                  `link_id` int(11) NOT NULL,
                  `user_id` int(11) NOT NULL,
                  `attend` date NOT NULL,
                  `ipaddr` varchar(64) DEFAULT NULL,
                  `updated_at` datetime NOT NULL,
                  UNIQUE KEY `link_id` (`link_id`,`user_id`,`attend`),
                  KEY `attend_ibfk_2` (`user_id`),
                  CONSTRAINT `attend_ibfk_1` FOREIGN KEY (`link_id`) REFERENCES `lti_link` (`link_id`) ON DELETE CASCADE ON UPDATE CASCADE,
                  CONSTRAINT `attend_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `lti_user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="blob_file">
                CREATE TABLE `blob_file` (
                  `file_id` int(11) NOT NULL AUTO_INCREMENT,
                  `file_sha256` char(64) NOT NULL,
                  `context_id` int(11) DEFAULT NULL,
                  `file_name` varchar(2048) DEFAULT NULL,
                  `deleted` tinyint(1) DEFAULT NULL,
                  `contenttype` varchar(256) DEFAULT NULL,
                  `path` varchar(2048) DEFAULT NULL,
                  `content` longblob,
                  `json` text,
                  `created_at` datetime NOT NULL,
                  `accessed_at` datetime NOT NULL,
                  PRIMARY KEY (`file_id`),
                  KEY `blob_indx_1` (`file_sha256`) USING HASH,
                  KEY `blob_ibfk_1` (`context_id`),
                  CONSTRAINT `blob_ibfk_1` FOREIGN KEY (`context_id`) REFERENCES `lti_context` (`context_id`) ON DELETE SET NULL ON UPDATE CASCADE
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:view name="fci2sam_export_vw">
                CREATE ALGORITHM=UNDEFINED DEFINER=`ltiuser`@`%` SQL SECURITY DEFINER VIEW `tsugi`.`fci2sam_export_vw` AS select `a`.`sis_enrollment_id` AS `sis_enrollment_id`,max(`a`.`user_updated`) AS `M1`,max(`b`.`user_updated`) AS `M2`,max(`c`.`user_updated`) AS `M3` from ((`tsugi`.`lti_result` `a` join `tsugi`.`lti_result` `b` on(((`a`.`sis_enrollment_id` = `b`.`sis_enrollment_id`) and (`b`.`fci_type` = 'M2')))) join `tsugi`.`lti_result` `c` on(((`a`.`sis_enrollment_id` = `c`.`sis_enrollment_id`) and (`c`.`fci_type` = 'M3')))) where (`a`.`fci_type` = 'M1') group by `a`.`sis_enrollment_id`;
            </pma:view>
            <pma:view name="fci_active_sp_report">
                CREATE ALGORITHM=UNDEFINED DEFINER=`ltiuser`@`%` SQL SECURITY DEFINER VIEW `tsugi`.`fci_active_sp_report` AS select (case when (`a`.`service_id` = 3) then 'UWC' when (`a`.`service_id` = 5) then 'UWM' else NULL end) AS `LMS_CAMPUS`,`b`.`displayname` AS `STUDENT_NAME`,`e`.`term_name` AS `STUDENT_ENROLLED_TERM`,`a`.`fci_type` AS `QUESTION`,`d`.`title` AS `COURSE_TITLE`,(select `user`.`displayname` from `tsugi`.`lti_user` `user` where `user`.`user_id` in (select distinct `result`.`instructor_id` from `tsugi`.`lti_result` `result` where ((`result`.`result_id` = `a`.`result_id`) and (`result`.`instructor_id` is not null))) limit 1) AS `INSTRUCTOR_NAME`,json_extract(`a`.`json`,concat('$.submit.',json_extract(json_keys(`a`.`json`,'$.submit'),'$[2]'))) AS `STUDENT_RESPONSE`,`a`.`user_updated` AS `STUDENT_SUBMISSION_TIME`,json_extract(`a`.`json`,'$.grade.feedback') AS `INSTRUCTOR_FEEDBACK`,`a`.`instructor_updated` AS `INSTRUCTOR_RESPONSE_TIME`,(case when ((`a`.`instructor_updated` is not null) and (timestampdiff(HOUR,`a`.`user_updated`,`a`.`instructor_updated`) &gt;= 0)) then round((timestampdiff(HOUR,`a`.`user_updated`,`a`.`instructor_updated`) / 24),2) else 'NA' end) AS `TIME2RESPONSE_DAYS` from ((((`tsugi`.`lti_result` `a` left join `tsugi`.`lti_user` `b` on((`a`.`user_id` = `b`.`user_id`))) left join `tsugi`.`lti_link` `c` on((`a`.`link_id` = `c`.`link_id`))) left join `tsugi`.`lti_context` `d` on((`c`.`context_id` = `d`.`context_id`))) left join `tsugi`.`fci_term` `e` on((substr(`a`.`sis_enrollment_id`,-(4),4) = `e`.`term_id`))) where ((not(`a`.`user_id` in (select `tsugi`.`lti_user`.`user_id` from `tsugi`.`lti_user` where ((`tsugi`.`lti_user`.`displayname` like 'Marcella%Thomp%') or (`tsugi`.`lti_user`.`displayname` like '%Jay Ong%') or (`tsugi`.`lti_user`.`displayname` like 'Clucky%') or (`tsugi`.`lti_user`.`displayname` like '%Chris%Lalande%') or (not((`tsugi`.`lti_user`.`lms_rolename` like '%Student%'))) or (`tsugi`.`lti_user`.`email` like 'jay.ong@uwex.edu') or (`tsugi`.`lti_user`.`lms_username` like '%ayclstudent%') or (`b`.`displayname` like '%Laura%Lenz%Perkins%'))))) and (`a`.`user_updated` between `e`.`term_start_dt` and `e`.`term_end_dt`) and (`a`.`fci_type` in ('M1','M2','M3')) and `e`.`term_id` in (select `t`.`term_id` from `tsugi`.`fci_term` `t` where (sysdate() between `t`.`term_start_dt` and `t`.`term_end_dt`)) and (`a`.`service_id` in ('3','5'))) order by `LMS_CAMPUS`,`STUDENT_NAME`;
            </pma:view>
            <pma:view name="fci_active_sp_report_all">
                CREATE ALGORITHM=UNDEFINED DEFINER=`ltiuser`@`%` SQL SECURITY DEFINER VIEW `tsugi`.`fci_active_sp_report_all` AS select (case when (`a`.`service_id` = 3) then 'UWC' when (`a`.`service_id` = 5) then 'UWM' else NULL end) AS `LMS_CAMPUS`,`b`.`displayname` AS `STUDENT_NAME`,`e`.`term_name` AS `STUDENT_ENROLLED_TERM`,`a`.`fci_type` AS `QUESTION`,`d`.`title` AS `COURSE_TITLE`,(select `user`.`displayname` from `tsugi`.`lti_user` `user` where `user`.`user_id` in (select distinct `result`.`instructor_id` from `tsugi`.`lti_result` `result` where ((`result`.`result_id` = `a`.`result_id`) and (`result`.`instructor_id` is not null))) limit 1) AS `INSTRUCTOR_NAME`,json_extract(`a`.`json`,concat('$.submit.',json_extract(json_keys(`a`.`json`,'$.submit'),'$[2]'))) AS `STUDENT_RESPONSE`,`a`.`user_updated` AS `STUDENT_SUBMISSION_TIME`,json_extract(`a`.`json`,'$.grade.feedback') AS `INSTRUCTOR_FEEDBACK`,`a`.`instructor_updated` AS `INSTRUCTOR_RESPONSE_TIME`,`f`.`ENROLLED_DT` AS `ENROLLED_DT`,`f`.`PROGRAM_ID` AS `PROGRAM_ID`,`f`.`COURSE_NAME` AS `COURSE_NAME`,(case when ((`a`.`instructor_updated` is not null) and (timestampdiff(HOUR,`a`.`user_updated`,`a`.`instructor_updated`) &gt;= 0)) then round((timestampdiff(HOUR,`a`.`user_updated`,`a`.`instructor_updated`) / 24),2) else 'NA' end) AS `TIME2RESPONSE_DAYS`,(case when isnull(`f`.`WITHDRAW_DT`) then FALSE else TRUE end) AS `WITHDRAWN` from (((((`tsugi`.`lti_result` `a` left join `tsugi`.`lti_user` `b` on((`a`.`user_id` = `b`.`user_id`))) left join `tsugi`.`lti_link` `c` on((`a`.`link_id` = `c`.`link_id`))) left join `tsugi`.`lti_context` `d` on((`c`.`context_id` = `d`.`context_id`))) left join `tsugi`.`fci_term` `e` on((substr(`a`.`sis_enrollment_id`,-(4),4) = `e`.`term_id`))) left join `tsugi`.`fci_sis_enrollments` `f` on((`a`.`sis_enrollment_id` = `f`.`EXT_COURSE_ID`))) where ((not(`a`.`user_id` in (select `tsugi`.`lti_user`.`user_id` from `tsugi`.`lti_user` where ((`tsugi`.`lti_user`.`displayname` like 'Marcella%Thomp%') or (`tsugi`.`lti_user`.`displayname` like '%Jay Ong%') or (`tsugi`.`lti_user`.`displayname` like 'Clucky%') or (`tsugi`.`lti_user`.`displayname` like '%Chris%Lalande%') or (not((`tsugi`.`lti_user`.`lms_rolename` like '%Student%'))) or (`tsugi`.`lti_user`.`email` like 'jay.ong@uwex.edu') or (`tsugi`.`lti_user`.`lms_username` like '%ayclstudent%') or (`b`.`displayname` like '%Laura%Lenz%Perkins%'))))) and (`a`.`user_updated` between `e`.`term_start_dt` and `e`.`term_end_dt`) and (`a`.`fci_type` in ('M1','M2','M3')) and (`a`.`service_id` in ('3','5'))) order by `LMS_CAMPUS`,`STUDENT_NAME`;
            </pma:view>
            <pma:view name="fci_active_sp_report_no_withdraw">
                CREATE ALGORITHM=UNDEFINED DEFINER=`ltiuser`@`%` SQL SECURITY DEFINER VIEW `tsugi`.`fci_active_sp_report_no_withdraw` AS select (case when (`a`.`service_id` = 3) then 'UWC' when (`a`.`service_id` = 5) then 'UWM' else NULL end) AS `LMS_CAMPUS`,`b`.`displayname` AS `STUDENT_NAME`,`e`.`term_name` AS `STUDENT_ENROLLED_TERM`,`a`.`fci_type` AS `QUESTION`,`d`.`title` AS `COURSE_TITLE`,(select `user`.`displayname` from `tsugi`.`lti_user` `user` where `user`.`user_id` in (select distinct `result`.`instructor_id` from `tsugi`.`lti_result` `result` where ((`result`.`result_id` = `a`.`result_id`) and (`result`.`instructor_id` is not null))) limit 1) AS `INSTRUCTOR_NAME`,json_extract(`a`.`json`,concat('$.submit.',json_extract(json_keys(`a`.`json`,'$.submit'),'$[2]'))) AS `STUDENT_RESPONSE`,json_extract(`a`.`json`,'$.grade.feedback') AS `INSTRUCTOR_FEEDBACK`,`a`.`user_updated` AS `STUDENT_SUBMISSION_TIME`,`a`.`instructor_updated` AS `INSTRUCTOR_RESPONSE_TIME`,(case when ((`a`.`instructor_updated` is not null) and (timestampdiff(HOUR,`a`.`user_updated`,`a`.`instructor_updated`) &gt;= 0)) then round((timestampdiff(HOUR,`a`.`user_updated`,`a`.`instructor_updated`) / 24),2) else 'NA' end) AS `TIME2RESPONSE_DAYS`,`f`.`ENROLLED_DT` AS `ENROLLED_DATE` from (((((`tsugi`.`lti_result` `a` left join `tsugi`.`lti_user` `b` on((`a`.`user_id` = `b`.`user_id`))) left join `tsugi`.`lti_link` `c` on((`a`.`link_id` = `c`.`link_id`))) left join `tsugi`.`lti_context` `d` on((`c`.`context_id` = `d`.`context_id`))) left join `tsugi`.`fci_term` `e` on((substr(`a`.`sis_enrollment_id`,-(4),4) = `e`.`term_id`))) left join `tsugi`.`fci_sis_enrollments` `f` on(((`a`.`sis_enrollment_id` = `f`.`EXT_COURSE_ID`) and (`f`.`WITHDRAW_DT` is not null)))) where ((not(`a`.`user_id` in (select `tsugi`.`lti_user`.`user_id` from `tsugi`.`lti_user` where ((`tsugi`.`lti_user`.`displayname` like 'Marcella%Thomp%') or (`tsugi`.`lti_user`.`displayname` like '%Jay Ong%') or (`tsugi`.`lti_user`.`displayname` like 'Clucky%') or (`tsugi`.`lti_user`.`displayname` like '%Chris%Lalande%') or (not((`tsugi`.`lti_user`.`lms_rolename` like '%Student%'))) or (`tsugi`.`lti_user`.`email` like 'jay.ong@uwex.edu') or (`tsugi`.`lti_user`.`lms_username` like '%ayclstudent%') or (`b`.`displayname` like '%Laura%Lenz%Perkins%'))))) and (`a`.`user_updated` between `e`.`term_start_dt` and `e`.`term_end_dt`) and `e`.`term_id` in (select `t`.`term_id` from `tsugi`.`fci_term` `t` where (sysdate() between `t`.`term_start_dt` and `t`.`term_end_dt`)) and (`a`.`fci_type` in ('M1','M2','M3')) and (`a`.`service_id` in ('3','5')));
            </pma:view>
            <pma:view name="fci_active_sp_report_v2">
                CREATE ALGORITHM=UNDEFINED DEFINER=`ltiuser`@`%` SQL SECURITY DEFINER VIEW `tsugi`.`fci_active_sp_report_v2` AS select (case when (`a`.`service_id` = 3) then 'UWC' when (`a`.`service_id` = 5) then 'UWM' else NULL end) AS `LMS_CAMPUS`,`b`.`displayname` AS `STUDENT_NAME`,`e`.`term_name` AS `STUDENT_ENROLLED_TERM`,`a`.`fci_type` AS `QUESTION`,`d`.`title` AS `COURSE_TITLE`,(select `user`.`displayname` from `tsugi`.`lti_user` `user` where `user`.`user_id` in (select distinct `result`.`instructor_id` from `tsugi`.`lti_result` `result` where ((`result`.`result_id` = `a`.`result_id`) and (`result`.`instructor_id` is not null))) limit 1) AS `INSTRUCTOR_NAME`,json_extract(`a`.`json`,concat('$.submit.',json_extract(json_keys(`a`.`json`,'$.submit'),'$[2]'))) AS `STUDENT_RESPONSE`,json_extract(`a`.`json`,'$.grade.feedback') AS `INSTRUCTOR_FEEDBACK`,`a`.`user_updated` AS `STUDENT_SUBMISSION_TIME`,`a`.`instructor_updated` AS `INSTRUCTOR_RESPONSE_TIME`,(case when ((`a`.`instructor_updated` is not null) and (timestampdiff(HOUR,`a`.`user_updated`,`a`.`instructor_updated`) &gt;= 0)) then round((timestampdiff(HOUR,`a`.`user_updated`,`a`.`instructor_updated`) / 24),2) else 'NA' end) AS `TIME2RESPONSE_DAYS`,`f`.`ENROLLED_DT` AS `ENROLLED_DATE`,`f`.`WITHDRAW_DT` AS `WITHDRAW_DT` from (((((`tsugi`.`lti_result` `a` left join `tsugi`.`lti_user` `b` on((`a`.`user_id` = `b`.`user_id`))) left join `tsugi`.`lti_link` `c` on((`a`.`link_id` = `c`.`link_id`))) left join `tsugi`.`lti_context` `d` on((`c`.`context_id` = `d`.`context_id`))) left join `tsugi`.`fci_term` `e` on((substr(`a`.`sis_enrollment_id`,-(4),4) = `e`.`term_id`))) left join `tsugi`.`fci_sis_enrollments` `f` on((`a`.`sis_enrollment_id` = `f`.`EXT_COURSE_ID`))) where ((not(`a`.`user_id` in (select `tsugi`.`lti_user`.`user_id` from `tsugi`.`lti_user` where ((`tsugi`.`lti_user`.`displayname` like 'Marcella%Thomp%') or (`tsugi`.`lti_user`.`displayname` like '%Jay Ong%') or (`tsugi`.`lti_user`.`displayname` like 'Clucky%') or (`tsugi`.`lti_user`.`displayname` like '%Chris%Lalande%') or (not((`tsugi`.`lti_user`.`lms_rolename` like '%Student%'))) or (`tsugi`.`lti_user`.`email` like 'jay.ong@uwex.edu') or (`tsugi`.`lti_user`.`lms_username` like '%ayclstudent%') or (`b`.`displayname` like '%Laura%Lenz%Perkins%'))))) and (`a`.`user_updated` between `e`.`term_start_dt` and `e`.`term_end_dt`) and `e`.`term_id` in (select `t`.`term_id` from `tsugi`.`fci_term` `t` where (sysdate() between `t`.`term_start_dt` and `t`.`term_end_dt`)) and (`a`.`fci_type` in ('M1','M2','M3')) and (`a`.`service_id` in ('3','5')));
            </pma:view>
            <pma:view name="fci_analytics_vw">
                CREATE ALGORITHM=UNDEFINED DEFINER=`ltiuser`@`%` SQL SECURITY DEFINER VIEW `tsugi`.`fci_analytics_vw` AS select (case when (`a`.`service_id` = 3) then 'UWC' when (`a`.`service_id` = 5) then 'UWM' else NULL end) AS `LMS_CAMPUS`,`b`.`displayname` AS `STUDENT_NAME`,`e`.`term_name` AS `STUDENT_ENROLLED_TERM`,`a`.`fci_type` AS `QUESTION`,`d`.`title` AS `COURSE_TITLE`,(select `user`.`displayname` from `tsugi`.`lti_user` `user` where `user`.`user_id` in (select distinct `result`.`instructor_id` from `tsugi`.`lti_result` `result` where ((`result`.`result_id` = `a`.`result_id`) and (`result`.`instructor_id` is not null))) limit 1) AS `INSTRUCTOR_NAME`,`a`.`user_updated` AS `STUDENT_SUBMISSION_TIME`,`a`.`instructor_updated` AS `INSTRUCTOR_RESPONSE_TIME`,(case when ((`a`.`instructor_updated` is not null) and (timestampdiff(HOUR,`a`.`user_updated`,`a`.`instructor_updated`) &gt;= 0)) then round((timestampdiff(HOUR,`a`.`user_updated`,`a`.`instructor_updated`) / 24),2) else 'NA' end) AS `TIME2RESPONSE_DAYS`,`f`.`ENROLLED_DT` AS `ENROLLED_DT`,`f`.`PROGRAM_ID` AS `PROGRAM_ID`,`f`.`COURSE_NAME` AS `COURSE_NAME`,`f`.`LETTER_GRADE` AS `GRADE`,(case when isnull(`f`.`WITHDRAW_DT`) then FALSE else TRUE end) AS `WITHDRAWN`,`f`.`EXT_STUDENT_ID1` AS `EXT_STUDENT_ID1`,`f`.`EXT_STUDENT_ID3` AS `EXT_STUDENT_ID3` from (((((`tsugi`.`lti_result` `a` left join `tsugi`.`lti_user` `b` on((`a`.`user_id` = `b`.`user_id`))) left join `tsugi`.`lti_link` `c` on((`a`.`link_id` = `c`.`link_id`))) left join `tsugi`.`lti_context` `d` on((`c`.`context_id` = `d`.`context_id`))) left join `tsugi`.`fci_term` `e` on((substr(`a`.`sis_enrollment_id`,-(4),4) = `e`.`term_id`))) left join `tsugi`.`fci_sis_enrollments` `f` on((`a`.`sis_enrollment_id` = `f`.`EXT_COURSE_ID`))) where ((not(`a`.`user_id` in (select `tsugi`.`lti_user`.`user_id` from `tsugi`.`lti_user` where ((`tsugi`.`lti_user`.`displayname` like 'Marcella%Thomp%') or (`tsugi`.`lti_user`.`displayname` like '%Jay Ong%') or (`tsugi`.`lti_user`.`displayname` like 'Clucky%') or (`tsugi`.`lti_user`.`displayname` like '%Chris%Lalande%') or (not((`tsugi`.`lti_user`.`lms_rolename` like '%Student%'))) or (`tsugi`.`lti_user`.`email` like 'jay.ong@uwex.edu') or (`tsugi`.`lti_user`.`lms_username` like '%ayclstudent%') or (`b`.`displayname` like '%Laura%Lenz%Perkins%'))))) and (`a`.`user_updated` between `e`.`term_start_dt` and `e`.`term_end_dt`) and (`a`.`fci_type` in ('M1','M2','M3')) and (`a`.`service_id` in ('3','5'))) order by `LMS_CAMPUS`,`STUDENT_NAME`;
            </pma:view>
            <pma:table name="fci_course_xwalk">
                CREATE TABLE `fci_course_xwalk` (
                  `COURSE_LONG_NAME` varchar(255) DEFAULT '',
                  `EXTERNAL_ID` varchar(100) NOT NULL DEFAULT '',
                  `SUBJECT` varchar(100) NOT NULL DEFAULT '',
                  `COURSE_NUMBER` varchar(100) NOT NULL,
                  PRIMARY KEY (`EXTERNAL_ID`,`SUBJECT`,`COURSE_NUMBER`),
                  KEY `fci_course_xwalk_index` (`EXTERNAL_ID`,`SUBJECT`,`COURSE_NUMBER`)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:view name="fci_enrollment_debug_vw">
                CREATE ALGORITHM=UNDEFINED DEFINER=`ltiuser`@`%` SQL SECURITY DEFINER VIEW `tsugi`.`fci_enrollment_debug_vw` AS select `b`.`user_id` AS `user_id`,`b`.`displayname` AS `displayname`,`b`.`lms_defined_id` AS `lms_defined_id`,`d`.`sis_course_code` AS `sis_course_code`,concat(`b`.`lms_defined_id`,'_',`d`.`sis_course_code`) AS `ext_course`,`d`.`title` AS `title`,`d`.`lms_course_code` AS `lms_course_code`,`c`.`fci_type` AS `fci_type`,`a`.`json` AS `json` from (((`tsugi`.`lti_result` `a` left join `tsugi`.`lti_user` `b` on((`a`.`user_id` = `b`.`user_id`))) left join `tsugi`.`lti_link` `c` on((`a`.`link_id` = `c`.`link_id`))) left join `tsugi`.`lti_context` `d` on((`c`.`context_id` = `d`.`context_id`))) where (isnull(`a`.`sis_enrollment_id`) and (not(`b`.`user_id` in (select `tsugi`.`lti_user`.`user_id` from `tsugi`.`lti_user` where ((`tsugi`.`lti_user`.`displayname` like 'Marcella%Thomp%') or (`tsugi`.`lti_user`.`displayname` like '%Jay Ong%') or (`tsugi`.`lti_user`.`displayname` like 'Clucky%') or (`tsugi`.`lti_user`.`displayname` like '%Chris%Lalande%') or (`tsugi`.`lti_user`.`email` in ('jay.ong@uwex.edu','laura.lenzperkins@uwex.edu','gordon24@uwm.edu','name@server.com','basia.owczarek@uwex.edu')) or (`tsugi`.`lti_user`.`lms_rolename` = 'Student Services'))))) and (`b`.`lms_rolename` like '%Student%')) order by `b`.`lms_defined_id`;
            </pma:view>
            <pma:view name="fci_fin_aid_report_vw">
                CREATE ALGORITHM=UNDEFINED DEFINER=`ltiuser`@`%` SQL SECURITY DEFINER VIEW `tsugi`.`fci_fin_aid_report_vw` AS select `u`.`lms_username` AS `USERNAME`,`u`.`lms_defined_id` AS `ORG_DEFINED_ID`,`u`.`lms_rolename` AS `ROLE_NAME`,`c`.`lms_course_code` AS `ORG_UNIT_CODE`,`c`.`context_key` AS `ORG_UNIT_ID`,date_format(`r`.`user_updated`,'%m/%d/%y %H:%i') AS `DATE_SUBMITTED`,NULL AS `DATE_POSTED`,NULL AS `TIME_STARTED`,NULL AS `TIME_COMPLETED`,(case `r`.`service_id` when 3 then 'UWCOL' when 5 then 'UWMIL' else 'Unknown' end) AS `INSTITUTION` from (((`tsugi`.`lti_user` `u` left join `tsugi`.`lti_result` `r` on((`u`.`user_id` = `r`.`user_id`))) left join `tsugi`.`lti_link` `l` on((`r`.`link_id` = `l`.`link_id`))) left join `tsugi`.`lti_context` `c` on((`l`.`context_id` = `c`.`context_id`))) where ((`u`.`lms_rolename` like '%student%') and (not((`u`.`lms_rolename` like 'Student Services'))) and (not((`u`.`email` like '%jay.ong@uwex.edu%'))) and (not((`u`.`email` like '%marcella.thompson@uwex.edu%'))) and (not((`u`.`email` like '%scott.reeser@uwex.edu%'))));
            </pma:view>
            <pma:table name="fci_link_history">
                CREATE TABLE `fci_link_history` (
                  `link_id` int(11) NOT NULL,
                  `link_sha256` char(64) DEFAULT NULL,
                  `link_key` text,
                  `json` mediumtext,
                  `created_at` timestamp NULL DEFAULT NULL,
                  `instructor_id` int(11) DEFAULT NULL,
                  `saved_timestamp` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
                  PRIMARY KEY (`link_id`,`saved_timestamp`)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="fci_month">
                CREATE TABLE `fci_month` (
                  `month_id` varchar(45) NOT NULL,
                  `month_start_dt` date DEFAULT NULL,
                  `month_end_dt` date DEFAULT NULL,
                  `sp_m1_start_dt` date DEFAULT NULL,
                  `day10_dt` date DEFAULT NULL,
                  `day17_dt` date DEFAULT NULL,
                  PRIMARY KEY (`month_id`)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="fci_result_history">
                CREATE TABLE `fci_result_history` (
                  `result_id` int(11) NOT NULL,
                  `link_id` int(11) DEFAULT NULL,
                  `user_id` int(11) DEFAULT NULL,
                  `sourcedid` text,
                  `json` mediumtext,
                  `updated_at` datetime DEFAULT NULL,
                  `user_updated` datetime DEFAULT NULL,
                  `instructor_id` int(11) DEFAULT NULL,
                  `instructor_updated` datetime DEFAULT NULL,
                  `saved_timestamp` datetime NOT NULL,
                  `reset_flag` tinyint(1) DEFAULT '0',
                  `student_enrollments` int(11) DEFAULT '1',
                  PRIMARY KEY (`result_id`,`saved_timestamp`)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:view name="fci_rp_student_helper_vw">
                CREATE ALGORITHM=UNDEFINED DEFINER=`ltiuser`@`%` SQL SECURITY DEFINER VIEW `tsugi`.`fci_rp_student_helper_vw` AS select `a`.`result_id` AS `result_id`,`a`.`link_id` AS `link_id`,`a`.`user_id` AS `user_id`,`a`.`deleted` AS `deleted`,`a`.`result_url` AS `result_url`,`a`.`sourcedid` AS `sourcedid`,`a`.`service_id` AS `service_id`,`a`.`ipaddr` AS `ipaddr`,`a`.`grade` AS `grade`,`a`.`note` AS `note`,`a`.`server_grade` AS `server_grade`,`a`.`json` AS `json`,`a`.`entity_version` AS `entity_version`,`a`.`created_at` AS `created_at`,`a`.`updated_at` AS `updated_at`,`a`.`retrieved_at` AS `retrieved_at`,`a`.`instructor_id` AS `instructor_id`,`a`.`user_updated` AS `user_updated`,`a`.`instructor_updated` AS `instructor_updated`,`a`.`fci_type` AS `fci_type`,`a`.`sis_enrollment_id` AS `sis_enrollment_id`,`a`.`fci_state` AS `fci_state` from `tsugi`.`lti_result` `a` where (`a`.`user_updated` &lt; (select `b`.`term_start_dt` from `tsugi`.`fci_term` `b` where (`b`.`term_id` like substr(`a`.`sis_enrollment_id`,-(4)))));
            </pma:view>
            <pma:table name="fci_sis_bio_demo">
                CREATE TABLE `fci_sis_bio_demo` (
                  `EXT_STUDENT_ID1` varchar(45) NOT NULL,
                  `EXT_STUDENT_ID2` varchar(45) DEFAULT NULL,
                  `EXT_STUDENT_ID3` varchar(45) DEFAULT NULL,
                  `EXT_STUDENT_ID4` varchar(45) DEFAULT NULL,
                  `FIRST_NAME` varchar(45) DEFAULT NULL,
                  `LAST_NAME` varchar(45) DEFAULT NULL,
                  `EMAIL_ADDR` varchar(100) DEFAULT NULL,
                  PRIMARY KEY (`EXT_STUDENT_ID1`)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="fci_sis_enrollments">
                CREATE TABLE `fci_sis_enrollments` (
                  `EXT_STUDENT_ID1` varchar(45) NOT NULL,
                  `EXT_STUDENT_ID2` varchar(45) DEFAULT NULL,
                  `EXT_STUDENT_ID3` varchar(45) DEFAULT NULL,
                  `EXT_STUDENT_ID4` varchar(45) DEFAULT NULL,
                  `PROG_START_DT` date DEFAULT NULL,
                  `EXT_CAMPUS_ID` varchar(45) DEFAULT NULL,
                  `EXT_SITE_ID` varchar(45) DEFAULT NULL,
                  `PROGRAM_ID` varchar(45) DEFAULT NULL,
                  `COURSE_ID` varchar(45) NOT NULL,
                  `CLASS_SECTION` varchar(45) DEFAULT NULL,
                  `COURSE_NAME` varchar(45) DEFAULT NULL,
                  `EXT_COURSE_ID` varchar(100) NOT NULL,
                  `COURSE_START_DT` date DEFAULT NULL,
                  `COURSE_END_DT` date DEFAULT NULL,
                  `REPEAT` varchar(45) DEFAULT NULL,
                  `ENROLLED_DT` date DEFAULT NULL,
                  `WITHDRAW_DT` date DEFAULT NULL,
                  `ATTENDANCE` varchar(45) DEFAULT NULL,
                  `COMPLETED` varchar(45) DEFAULT NULL,
                  `LETTER_GRADE` varchar(45) DEFAULT NULL,
                  `PROGRAM_APPLICABLE` varchar(45) DEFAULT NULL,
                  `SAP_REVIEW_END_DT` date DEFAULT NULL,
                  `TRANSFER` varchar(45) DEFAULT NULL,
                  `REMEDIAL` varchar(45) DEFAULT NULL,
                  `EXTRACT_DATE` date DEFAULT NULL,
                  PRIMARY KEY (`EXT_STUDENT_ID1`,`EXT_COURSE_ID`,`COURSE_ID`) USING BTREE
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:view name="fci_state_byterm_audit">
                CREATE ALGORITHM=UNDEFINED DEFINER=`ltiuser`@`%` SQL SECURITY DEFINER VIEW `tsugi`.`fci_state_byterm_audit` AS select substr(`tsugi`.`lti_result`.`sis_enrollment_id`,-(4),4) AS `TERM`,`tsugi`.`lti_result`.`fci_state` AS `FCI_STATE`,count(0) AS `count(*)` from `tsugi`.`lti_result` group by `tsugi`.`lti_result`.`fci_state`,substr(`tsugi`.`lti_result`.`sis_enrollment_id`,-(4),4) order by `TERM`;
            </pma:view>
            <pma:table name="fci_term">
                CREATE TABLE `fci_term` (
                  `term_id` varchar(45) NOT NULL,
                  `term_name` varchar(45) DEFAULT NULL,
                  `term_start_dt` date DEFAULT NULL,
                  `term_end_dt` date DEFAULT NULL,
                  `term_month_1` varchar(45) DEFAULT NULL,
                  `term_month_2` varchar(45) DEFAULT NULL,
                  `term_month_3` varchar(45) DEFAULT NULL,
                  `sp_fci_m1_due_dt` date DEFAULT NULL,
                  `sp_fci_m2_due_dt` date DEFAULT NULL,
                  `sp_fci_m3_due_dt` date DEFAULT NULL,
                  PRIMARY KEY (`term_id`)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="key_request">
                CREATE TABLE `key_request` (
                  `request_id` int(11) NOT NULL AUTO_INCREMENT,
                  `user_id` int(11) NOT NULL,
                  `title` varchar(512) NOT NULL,
                  `notes` text,
                  `admin` text,
                  `state` smallint(6) DEFAULT NULL,
                  `lti` tinyint(4) DEFAULT NULL,
                  `json` text,
                  `created_at` datetime NOT NULL,
                  `updated_at` datetime NOT NULL,
                  PRIMARY KEY (`request_id`),
                  KEY `key_request_fk_1` (`user_id`),
                  CONSTRAINT `key_request_fk_1` FOREIGN KEY (`user_id`) REFERENCES `lti_user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="lms_plugins">
                CREATE TABLE `lms_plugins` (
                  `plugin_id` int(11) NOT NULL AUTO_INCREMENT,
                  `plugin_path` varchar(255) NOT NULL,
                  `version` bigint(20) NOT NULL,
                  `title` varchar(2048) DEFAULT NULL,
                  `json` text,
                  `created_at` datetime NOT NULL,
                  `updated_at` datetime NOT NULL,
                  PRIMARY KEY (`plugin_id`),
                  UNIQUE KEY `plugin_path` (`plugin_path`)
                ) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="lms_role_permissions">
                CREATE TABLE `lms_role_permissions` (
                  `lms_role_number` int(4) NOT NULL,
                  `lms_role_name` varchar(100) NOT NULL,
                  `give_feedback` tinyint(1) NOT NULL,
                  `modify_question` tinyint(1) NOT NULL,
                  `readonly_view` tinyint(1) NOT NULL,
                  `individual_view` tinyint(1) NOT NULL
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="lti_context">
                CREATE TABLE `lti_context` (
                  `context_id` int(11) NOT NULL AUTO_INCREMENT,
                  `context_sha256` char(64) NOT NULL,
                  `context_key` text NOT NULL,
                  `deleted` tinyint(1) NOT NULL DEFAULT '0',
                  `key_id` int(11) NOT NULL,
                  `path` text,
                  `title` text,
                  `lessons` mediumtext,
                  `json` mediumtext,
                  `settings` mediumtext,
                  `settings_url` text,
                  `ext_memberships_id` text,
                  `ext_memberships_url` text,
                  `memberships_url` text,
                  `lineitems_url` text,
                  `entity_version` int(11) NOT NULL DEFAULT '0',
                  `lms_course_code` varchar(100) DEFAULT NULL,
                  `sis_course_code` varchar(45) DEFAULT NULL,
                  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                  `updated_at` timestamp NOT NULL DEFAULT '1970-01-02 00:00:00',
                  PRIMARY KEY (`context_id`),
                  UNIQUE KEY `key_id` (`key_id`,`context_sha256`),
                  CONSTRAINT `lti_context_ibfk_1` FOREIGN KEY (`key_id`) REFERENCES `lti_key` (`key_id`) ON DELETE CASCADE ON UPDATE CASCADE
                ) ENGINE=InnoDB AUTO_INCREMENT=1056 DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:trigger name="LTI_CONTEXT_BEFORE_UPDATE">
                CREATE TRIGGER `LTI_CONTEXT_BEFORE_UPDATE` BEFORE UPDATE ON `lti_context`
                 FOR EACH ROW BEGIN
                	DECLARE SIS_COURSE_CODE VARCHAR(100);
                    DECLARE CONTEXT_ID		INT;
                 
                -- IF (NEW.sis_course_code IS NULL) THEN 
                -- 	SELECT b.external_id from fci_course_xwalk b
                -- where NEW.lms_course_code LIKE -- --concat('%',b.SUBJECT,REPLACE(REPLACE(REPLACE(b.COURSE_NUMBER,'X',''),'x',''),'-','%SEC'),'%')
                -- 	        or NEW.lms_course_code LIKE concat('%',b.SUBJECT,'_',REPLACE(REPLACE(REPLACE(b.COURSE_NUMBER,'X',''),'x',''),'-','%SEC'),'%')
                -- 			or NEW.lms_course_code = b.COURSE_NUMBER
                -- 		into @SIS_COURSE_CODE;
                 --        SET NEW.sis_course_code := @SIS_COURSE_CODE;
                -- END IF;
                END
            </pma:trigger>
            <pma:table name="lti_domain">
                CREATE TABLE `lti_domain` (
                  `domain_id` int(11) NOT NULL AUTO_INCREMENT,
                  `key_id` int(11) NOT NULL,
                  `context_id` int(11) DEFAULT NULL,
                  `deleted` tinyint(1) NOT NULL DEFAULT '0',
                  `domain` varchar(128) DEFAULT NULL,
                  `port` int(11) DEFAULT NULL,
                  `consumer_key` text,
                  `secret` text,
                  `json` text,
                  `created_at` datetime NOT NULL,
                  `updated_at` datetime NOT NULL,
                  PRIMARY KEY (`domain_id`),
                  UNIQUE KEY `key_id` (`key_id`,`context_id`,`domain`,`port`),
                  KEY `lti_domain_ibfk_2` (`context_id`),
                  CONSTRAINT `lti_domain_ibfk_1` FOREIGN KEY (`key_id`) REFERENCES `lti_key` (`key_id`) ON DELETE CASCADE ON UPDATE CASCADE,
                  CONSTRAINT `lti_domain_ibfk_2` FOREIGN KEY (`context_id`) REFERENCES `lti_context` (`context_id`) ON DELETE CASCADE ON UPDATE CASCADE
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="lti_key">
                CREATE TABLE `lti_key` (
                  `key_id` int(11) NOT NULL AUTO_INCREMENT,
                  `key_sha256` char(64) NOT NULL,
                  `key_key` text NOT NULL,
                  `deleted` tinyint(1) NOT NULL DEFAULT '0',
                  `secret` text,
                  `new_secret` text,
                  `ack` text,
                  `user_id` int(11) DEFAULT NULL,
                  `consumer_profile` mediumtext,
                  `new_consumer_profile` mediumtext,
                  `tool_profile` mediumtext,
                  `new_tool_profile` mediumtext,
                  `json` mediumtext,
                  `settings` mediumtext,
                  `settings_url` text,
                  `entity_version` int(11) NOT NULL DEFAULT '0',
                  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                  `updated_at` timestamp NOT NULL DEFAULT '1970-01-02 00:00:00',
                  PRIMARY KEY (`key_id`),
                  UNIQUE KEY `key_sha256` (`key_sha256`),
                  UNIQUE KEY `key_sha256_2` (`key_sha256`)
                ) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="lti_link">
                CREATE TABLE `lti_link` (
                  `link_id` int(11) NOT NULL AUTO_INCREMENT,
                  `link_sha256` char(64) NOT NULL,
                  `link_key` text NOT NULL,
                  `deleted` tinyint(1) NOT NULL DEFAULT '0',
                  `context_id` int(11) NOT NULL,
                  `path` text,
                  `title` text,
                  `json` mediumtext,
                  `settings` mediumtext,
                  `settings_url` text,
                  `entity_version` int(11) NOT NULL DEFAULT '0',
                  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                  `updated_at` timestamp NOT NULL DEFAULT '1970-01-02 00:00:00',
                  `instructor_id` int(11) DEFAULT NULL,
                  `fci_type` varchar(2) DEFAULT NULL,
                  PRIMARY KEY (`link_id`),
                  UNIQUE KEY `link_sha256` (`link_sha256`,`context_id`),
                  KEY `lti_link_ibfk_1` (`context_id`),
                  CONSTRAINT `lti_link_ibfk_1` FOREIGN KEY (`context_id`) REFERENCES `lti_context` (`context_id`) ON DELETE CASCADE ON UPDATE CASCADE
                ) ENGINE=InnoDB AUTO_INCREMENT=3042 DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:trigger name="FCI_LINK_HISTORY">
                CREATE TRIGGER `FCI_LINK_HISTORY` AFTER UPDATE ON `lti_link`
                 FOR EACH ROW BEGIN
                	IF (OLD.json &lt;&gt; NEW.json) THEN
                	   INSERT INTO 
                	   tsugi.fci_link_history(
                	   link_id,
                	   link_sha256,
                	   link_key,
                	   json,
                	   created_at,
                       instructor_id,
                	   saved_timestamp
                	   )
                	   VALUES(
                	   NEW.link_id,
                	   NEW.link_sha256,
                	   NEW.link_key,
                	   NEW.json,
                	   NEW.created_at,
                       NEW.instructor_id,
                	   SYSDATE());
                	END IF;   
                END
            </pma:trigger>
            <pma:table name="lti_membership">
                CREATE TABLE `lti_membership` (
                  `membership_id` int(11) NOT NULL AUTO_INCREMENT,
                  `context_id` int(11) NOT NULL,
                  `user_id` int(11) NOT NULL,
                  `deleted` tinyint(1) NOT NULL DEFAULT '0',
                  `role` smallint(6) DEFAULT NULL,
                  `role_override` smallint(6) DEFAULT NULL,
                  `json` mediumtext,
                  `entity_version` int(11) NOT NULL DEFAULT '0',
                  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                  `updated_at` timestamp NOT NULL DEFAULT '1970-01-02 00:00:00',
                  PRIMARY KEY (`membership_id`),
                  UNIQUE KEY `context_id` (`context_id`,`user_id`),
                  KEY `lti_membership_ibfk_2` (`user_id`),
                  CONSTRAINT `lti_membership_ibfk_1` FOREIGN KEY (`context_id`) REFERENCES `lti_context` (`context_id`) ON DELETE CASCADE ON UPDATE CASCADE,
                  CONSTRAINT `lti_membership_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `lti_user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
                ) ENGINE=InnoDB AUTO_INCREMENT=8340 DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="lti_nonce">
                CREATE TABLE `lti_nonce` (
                  `nonce` char(128) NOT NULL,
                  `key_id` int(11) NOT NULL,
                  `entity_version` int(11) NOT NULL DEFAULT '0',
                  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                  UNIQUE KEY `key_id` (`key_id`,`nonce`),
                  KEY `nonce_indx_1` (`nonce`) USING HASH
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="lti_result">
                CREATE TABLE `lti_result` (
                  `result_id` int(11) NOT NULL AUTO_INCREMENT,
                  `link_id` int(11) NOT NULL,
                  `user_id` int(11) NOT NULL,
                  `deleted` tinyint(1) NOT NULL DEFAULT '0',
                  `result_url` text,
                  `sourcedid` text,
                  `service_id` int(11) DEFAULT NULL,
                  `ipaddr` varchar(64) DEFAULT NULL,
                  `grade` float DEFAULT NULL,
                  `note` mediumtext,
                  `server_grade` float DEFAULT NULL,
                  `json` mediumtext,
                  `entity_version` int(11) NOT NULL DEFAULT '0',
                  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                  `updated_at` timestamp NOT NULL DEFAULT '1970-01-02 00:00:00',
                  `retrieved_at` datetime DEFAULT NULL,
                  `instructor_id` int(11) DEFAULT NULL,
                  `user_updated` datetime DEFAULT NULL,
                  `instructor_updated` datetime DEFAULT NULL,
                  `fci_type` varchar(2) DEFAULT NULL,
                  `sis_enrollment_id` varchar(100) DEFAULT NULL,
                  `fci_state` varchar(2) DEFAULT NULL,
                  PRIMARY KEY (`result_id`),
                  UNIQUE KEY `link_id` (`link_id`,`user_id`),
                  UNIQUE KEY `sis_enrollments` (`result_id`,`link_id`,`sis_enrollment_id`),
                  KEY `lti_result_ibfk_2` (`user_id`),
                  KEY `lti_result_ibfk_3` (`service_id`),
                  CONSTRAINT `lti_result_ibfk_1` FOREIGN KEY (`link_id`) REFERENCES `lti_link` (`link_id`) ON DELETE CASCADE ON UPDATE CASCADE,
                  CONSTRAINT `lti_result_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `lti_user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE,
                  CONSTRAINT `lti_result_ibfk_3` FOREIGN KEY (`service_id`) REFERENCES `lti_service` (`service_id`) ON DELETE CASCADE ON UPDATE CASCADE
                ) ENGINE=InnoDB AUTO_INCREMENT=21535 DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:trigger name="FCI_RESULT_HISTORY">
                CREATE TRIGGER `FCI_RESULT_HISTORY` AFTER UPDATE ON `lti_result`
                 FOR EACH ROW BEGIN
                
                DECLARE enrollmentCount INT default 1;
                DECLARE studentEnrollments INT default 1;
                DECLARE resetFlag BOOL default false;
                
                SET enrollmentCount = (
                  SELECT COUNT(*)
                  FROM fci_sis_enrollments
                  WHERE ext_student_id2 LIKE (
                      SELECT DISTINCT lms_defined_id
                      FROM lti_user
                      WHERE user_id = NEW.user_id)
                  AND course_id LIKE (
                      SELECT DISTINCT c.sis_course_code
                      FROM lti_context AS c INNER JOIN lti_link AS l USING (context_id)
                      WHERE l.link_id = NEW.link_id)
                );
                
                SET studentEnrollments = (
                    SELECT max(student_enrollments)
                    FROM fci_result_history
                    WHERE result_id = NEW.result_id
                );
                
                SET resetFlag = (enrollmentCount &gt; studentEnrollments);
                
                
                
                IF (OLD.json &lt;&gt; NEW.json) THEN
                	   INSERT INTO 
                	   tsugi.fci_result_history(
                	   	   result_id,
                           link_id,
                           user_id,
                           sourcedid,
                           json,
                           updated_at,
                           instructor_id,
                           user_updated,
                           instructor_updated,
                           saved_timestamp,
                           reset_flag,
                           student_enrollments
                	   )
                	   VALUES(
                           NEW.result_id,
                	       NEW.link_id,
                           NEW.user_id,
                           NEW.sourcedid,
                           NEW.json,
                           NEW.updated_at,
                           NEW.instructor_id,
                           NEW.user_updated,
                           NEW.instructor_updated,
                	   	   SYSDATE(),
                           resetFlag,
                           enrollmentCount
                       );
                	END IF;  
                    
                END
            </pma:trigger>
            <pma:trigger name="LTI_RESULT_BEFORE_INSERT">
                CREATE TRIGGER `LTI_RESULT_BEFORE_INSERT` BEFORE INSERT ON `lti_result`
                 FOR EACH ROW BEGIN
                	DECLARE MAX_EXTCOURSEID VARCHAR(100);
                	DECLARE MIN_FCISTATE 	VARCHAR(100);
                    DECLARE RESULT_ID		INT;
                    
                IF (NEW.sis_enrollment_id IS NULL) THEN
                	SELECT 
                		MAX(b.EXT_COURSE_ID),
                		MIN(
                		CASE WHEN t.term_start_dt IS NULL THEN '0'
                		WHEN sysdate() BETWEEN t.term_start_dt AND DATE_ADD(Date_add(t.term_start_dt,INTERVAL -1 day),INTERVAL 1 MONTH) THEN '1' 
                		WHEN sysdate() BETWEEN t.term_start_dt AND DATE_ADD(DATE_ADD(t.term_start_dt,INTERVAL -1 DAY),INTERVAL 2 MONTH) THEN '2' 
                		WHEN sysdate() BETWEEN t.term_start_dt AND DATE_ADD(DATE_ADD(t.term_start_dt,INTERVAL -1 DAY),INTERVAL 3 MONTH) THEN '3' 
                		WHEN sysdate() &lt; t.term_start_dt THEN '4'
                		WHEN sysdate() &gt; DATE_ADD(DATE_ADD(t.term_start_dt,INTERVAL -1 DAY),INTERVAL 3 MONTH) THEN '5'
                		ELSE '0' END
                		)
                		AS fci_state
                	 FROM 
                	 lti_user a,
                	 fci_sis_enrollments b, 
                	 lti_link d, 
                	 lti_context e,
                	 fci_term t 
                	 WHERE 
                	 (e.sis_course_code=b.course_id OR
                	 e.sis_course_code=concat(b.course_id,'-',b.class_section) OR
                	 e.lms_course_code LIKE concat('%',replace(replace(b.course_id,'X',''),'x',''),'%')
                	 ) AND
                	 a.lms_defined_id IN(b.EXT_STUDENT_ID2,b.EXT_STUDENT_ID3) AND 
                	 b.transfer IS NULL AND
                	 NEW.user_id=a.user_id AND
                	 NEW.link_id=d.link_id AND
                	 d.context_id=e.context_id AND
                	 t.term_id=substr(b.EXT_COURSE_ID,-4,4)
                	 GROUP BY a.lms_defined_id,b.course_id
                     INTO @MAX_EXTCOURSEID,@MIN_FCISTATE
                     ;
                     
                     IF (@MAX_EXTCOURSEID IS NOT NULL) THEN
                	   	SET NEW.sis_enrollment_id := @MAX_EXTCOURSEID;
                	 END IF;
                     IF (@MIN_FCISTATE IS NOT NULL) THEN
                        SET NEW.fci_state := @MIN_FCISTATE;
                	 END IF;
                END IF;
                
                END
            </pma:trigger>
            <pma:table name="lti_service">
                CREATE TABLE `lti_service` (
                  `service_id` int(11) NOT NULL AUTO_INCREMENT,
                  `service_sha256` char(64) NOT NULL,
                  `service_key` text NOT NULL,
                  `deleted` tinyint(1) NOT NULL DEFAULT '0',
                  `key_id` int(11) NOT NULL,
                  `format` varchar(1024) DEFAULT NULL,
                  `json` mediumtext,
                  `entity_version` int(11) NOT NULL DEFAULT '0',
                  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                  `updated_at` timestamp NOT NULL DEFAULT '1970-01-02 00:00:00',
                  PRIMARY KEY (`service_id`),
                  UNIQUE KEY `key_id` (`key_id`,`service_sha256`),
                  CONSTRAINT `lti_service_ibfk_1` FOREIGN KEY (`key_id`) REFERENCES `lti_key` (`key_id`) ON DELETE CASCADE ON UPDATE CASCADE
                ) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="lti_user">
                CREATE TABLE `lti_user` (
                  `user_id` int(11) NOT NULL AUTO_INCREMENT,
                  `user_sha256` char(64) NOT NULL,
                  `user_key` text NOT NULL,
                  `deleted` tinyint(1) NOT NULL DEFAULT '0',
                  `key_id` int(11) NOT NULL,
                  `profile_id` int(11) DEFAULT NULL,
                  `displayname` text,
                  `email` text,
                  `locale` char(63) DEFAULT NULL,
                  `image` text,
                  `subscribe` smallint(6) DEFAULT NULL,
                  `json` mediumtext,
                  `login_at` datetime DEFAULT NULL,
                  `login_count` int(11) DEFAULT NULL,
                  `ipaddr` varchar(64) DEFAULT NULL,
                  `entity_version` int(11) NOT NULL DEFAULT '0',
                  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                  `updated_at` timestamp NOT NULL DEFAULT '1970-01-02 00:00:00',
                  `lms_defined_id` varchar(100) DEFAULT NULL,
                  `lms_username` varchar(100) DEFAULT NULL,
                  `lms_rolename` varchar(100) DEFAULT NULL,
                  PRIMARY KEY (`user_id`),
                  UNIQUE KEY `key_id` (`key_id`,`user_sha256`),
                  CONSTRAINT `lti_user_ibfk_1` FOREIGN KEY (`key_id`) REFERENCES `lti_key` (`key_id`) ON DELETE CASCADE ON UPDATE CASCADE
                ) ENGINE=InnoDB AUTO_INCREMENT=1817 DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="mail_bulk">
                CREATE TABLE `mail_bulk` (
                  `bulk_id` int(11) NOT NULL AUTO_INCREMENT,
                  `user_id` int(11) NOT NULL,
                  `context_id` int(11) NOT NULL,
                  `subject` varchar(256) DEFAULT NULL,
                  `body` text,
                  `json` text,
                  `created_at` datetime NOT NULL,
                  PRIMARY KEY (`bulk_id`),
                  KEY `mail_bulk_ibfk_1` (`context_id`),
                  KEY `mail_bulk_ibfk_2` (`user_id`),
                  CONSTRAINT `mail_bulk_ibfk_1` FOREIGN KEY (`context_id`) REFERENCES `lti_context` (`context_id`) ON DELETE CASCADE ON UPDATE CASCADE,
                  CONSTRAINT `mail_bulk_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `lti_user` (`user_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="mail_sent">
                CREATE TABLE `mail_sent` (
                  `sent_id` int(11) NOT NULL AUTO_INCREMENT,
                  `context_id` int(11) NOT NULL,
                  `link_id` int(11) DEFAULT NULL,
                  `user_to` int(11) DEFAULT NULL,
                  `user_from` int(11) DEFAULT NULL,
                  `subject` varchar(256) DEFAULT NULL,
                  `body` text,
                  `json` text,
                  `created_at` datetime NOT NULL,
                  PRIMARY KEY (`sent_id`),
                  KEY `mail_sent_ibfk_1` (`context_id`),
                  KEY `mail_sent_ibfk_2` (`link_id`),
                  KEY `mail_sent_ibfk_3` (`user_to`),
                  KEY `mail_sent_ibfk_4` (`user_from`),
                  CONSTRAINT `mail_sent_ibfk_1` FOREIGN KEY (`context_id`) REFERENCES `lti_context` (`context_id`) ON DELETE CASCADE ON UPDATE CASCADE,
                  CONSTRAINT `mail_sent_ibfk_2` FOREIGN KEY (`link_id`) REFERENCES `lti_link` (`link_id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
                  CONSTRAINT `mail_sent_ibfk_3` FOREIGN KEY (`user_to`) REFERENCES `lti_user` (`user_id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
                  CONSTRAINT `mail_sent_ibfk_4` FOREIGN KEY (`user_from`) REFERENCES `lti_user` (`user_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="peer_assn">
                CREATE TABLE `peer_assn` (
                  `assn_id` int(11) NOT NULL AUTO_INCREMENT,
                  `link_id` int(11) NOT NULL,
                  `due_at` datetime NOT NULL,
                  `json` text,
                  `updated_at` datetime NOT NULL,
                  `created_at` datetime NOT NULL,
                  PRIMARY KEY (`assn_id`),
                  UNIQUE KEY `link_id` (`link_id`),
                  CONSTRAINT `peer_assn_ibfk_1` FOREIGN KEY (`link_id`) REFERENCES `lti_link` (`link_id`) ON DELETE CASCADE ON UPDATE CASCADE
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="peer_flag">
                CREATE TABLE `peer_flag` (
                  `flag_id` int(11) NOT NULL AUTO_INCREMENT,
                  `submit_id` int(11) NOT NULL,
                  `grade_id` int(11) DEFAULT NULL,
                  `user_id` int(11) NOT NULL,
                  `note` text,
                  `response` text,
                  `handled` tinyint(1) NOT NULL DEFAULT '0',
                  `respond_id` int(11) NOT NULL,
                  `json` text,
                  `updated_at` datetime NOT NULL,
                  `created_at` datetime NOT NULL,
                  PRIMARY KEY (`flag_id`),
                  UNIQUE KEY `submit_id` (`submit_id`,`grade_id`,`user_id`),
                  CONSTRAINT `peer_flag_ibfk_1` FOREIGN KEY (`submit_id`) REFERENCES `peer_submit` (`submit_id`) ON DELETE CASCADE ON UPDATE CASCADE
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="peer_grade">
                CREATE TABLE `peer_grade` (
                  `grade_id` int(11) NOT NULL AUTO_INCREMENT,
                  `submit_id` int(11) NOT NULL,
                  `user_id` int(11) NOT NULL,
                  `points` double DEFAULT NULL,
                  `rating` tinyint(4) DEFAULT NULL,
                  `note` text,
                  `json` text,
                  `updated_at` datetime NOT NULL,
                  `created_at` datetime NOT NULL,
                  PRIMARY KEY (`grade_id`),
                  UNIQUE KEY `submit_id` (`submit_id`,`user_id`),
                  CONSTRAINT `peer_grade_ibfk_1` FOREIGN KEY (`submit_id`) REFERENCES `peer_submit` (`submit_id`) ON DELETE CASCADE ON UPDATE CASCADE
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="peer_submit">
                CREATE TABLE `peer_submit` (
                  `submit_id` int(11) NOT NULL AUTO_INCREMENT,
                  `assn_id` int(11) NOT NULL,
                  `user_id` int(11) NOT NULL,
                  `json` text,
                  `note` text,
                  `reflect` text,
                  `regrade` tinyint(4) DEFAULT NULL,
                  `inst_points` double DEFAULT NULL,
                  `inst_note` text,
                  `inst_id` int(11) DEFAULT NULL,
                  `rating` int(11) DEFAULT NULL,
                  `updated_at` datetime NOT NULL,
                  `created_at` datetime NOT NULL,
                  PRIMARY KEY (`submit_id`),
                  UNIQUE KEY `assn_id` (`assn_id`,`user_id`),
                  KEY `peer_submit_ibfk_1` (`user_id`),
                  CONSTRAINT `peer_submit_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `lti_user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE,
                  CONSTRAINT `peer_submit_ibfk_2` FOREIGN KEY (`assn_id`) REFERENCES `peer_assn` (`assn_id`) ON DELETE CASCADE ON UPDATE CASCADE
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="peer_text">
                CREATE TABLE `peer_text` (
                  `text_id` int(11) NOT NULL AUTO_INCREMENT,
                  `assn_id` int(11) NOT NULL,
                  `user_id` int(11) NOT NULL,
                  `data` text,
                  `json` text,
                  `updated_at` datetime NOT NULL,
                  `created_at` datetime NOT NULL,
                  PRIMARY KEY (`text_id`),
                  KEY `peer_text_ibfk_1` (`assn_id`),
                  KEY `peer_text_ibfk_2` (`user_id`),
                  CONSTRAINT `peer_text_ibfk_1` FOREIGN KEY (`assn_id`) REFERENCES `peer_assn` (`assn_id`) ON DELETE CASCADE ON UPDATE CASCADE,
                  CONSTRAINT `peer_text_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `lti_user` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:table name="profile">
                CREATE TABLE `profile` (
                  `profile_id` int(11) NOT NULL AUTO_INCREMENT,
                  `profile_sha256` char(64) NOT NULL,
                  `profile_key` text NOT NULL,
                  `deleted` tinyint(1) NOT NULL DEFAULT '0',
                  `key_id` int(11) NOT NULL,
                  `displayname` text,
                  `email` text,
                  `image` text,
                  `locale` char(63) DEFAULT NULL,
                  `subscribe` smallint(6) DEFAULT NULL,
                  `json` mediumtext,
                  `login_at` datetime DEFAULT NULL,
                  `entity_version` int(11) NOT NULL DEFAULT '0',
                  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                  `updated_at` timestamp NOT NULL DEFAULT '1970-01-02 00:00:00',
                  PRIMARY KEY (`profile_id`),
                  UNIQUE KEY `profile_sha256` (`profile_sha256`),
                  UNIQUE KEY `profile_id` (`profile_id`,`profile_sha256`)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8;
            </pma:table>
            <pma:view name="repeat_students_vw">
                CREATE ALGORITHM=UNDEFINED DEFINER=`ltiuser`@`%` SQL SECURITY DEFINER VIEW `tsugi`.`repeat_students_vw` AS select `b`.`displayname` AS `displayname`,`c`.`title` AS `title`,`a`.`fci_type` AS `fci_type`,`a`.`user_updated` AS `user_updated` from (((`tsugi`.`lti_result` `a` left join `tsugi`.`lti_user` `b` on((`a`.`user_id` = `b`.`user_id`))) left join `tsugi`.`lti_link` `l` on((`a`.`link_id` = `l`.`link_id`))) left join `tsugi`.`lti_context` `c` on((`c`.`context_id` = `l`.`context_id`))) where ((substr(`a`.`sis_enrollment_id`,-(4),4) = '5802') and (`a`.`fci_type` = 'M1') and (`a`.`user_updated` not between '2018-02-02' and '2018-02-12') and (`a`.`service_id` = '3'));
            </pma:view>
            <pma:view name="students_not_in_fci_sis_bio_demo_vw">
                CREATE ALGORITHM=UNDEFINED DEFINER=`ltiuser`@`%` SQL SECURITY DEFINER VIEW `tsugi`.`students_not_in_fci_sis_bio_demo_vw` AS select `a`.`displayname` AS `displayname`,`a`.`email` AS `email` from (`tsugi`.`lti_user` `a` left join `tsugi`.`fci_sis_bio_demo` `b` on((`a`.`email` = `b`.`EMAIL_ADDR`))) where (isnull(`b`.`EMAIL_ADDR`) and (`a`.`lms_rolename` like '%Student%') and (not((`a`.`lms_rolename` like '%Services%'))) and (not((`a`.`lms_rolename` like 'Student'))) and (not((`a`.`email` like '%jay.ong%'))) and (not((`a`.`email` like '%marcella.thompson%')))) order by `a`.`updated_at` desc;
            </pma:view>
            <pma:view name="Student View">
                CREATE ALGORITHM=UNDEFINED DEFINER=`ltiuser`@`%` SQL SECURITY DEFINER VIEW `tsugi`.`Student View` AS select `u`.`displayname` AS `displayname`,`u`.`email` AS `email`,`l`.`fci_type` AS `fci_type`,`r`.`user_updated` AS `user_updated` from (((`tsugi`.`lti_user` `u` join `tsugi`.`lti_result` `r` on((`u`.`user_id` = `r`.`user_id`))) join `tsugi`.`lti_link` `l` on((`r`.`link_id` = `l`.`link_id`))) join `tsugi`.`lti_context` `c` on((`l`.`context_id` = `c`.`context_id`)));
            </pma:view>
            <pma:procedure name="FIN_AID_REPORT_PROC">
                CREATE DEFINER=`ltiuser`@`%` PROCEDURE `FIN_AID_REPORT_PROC`()
                    NO SQL
                SELECT u.lms_username AS USERNAME, u.lms_defined_id AS ORG_DEFINED_ID, u.lms_rolename AS ROLE_NAME, c.lms_course_code AS ORG_UNIT_CODE, null AS ORG_UNIT_ID, DATE_FORMAT(r.created_at, &quot;%m/%d/%Y %H:%i:%s&quot;) AS DATE_SUBMITTED, null AS DATE_POSTED, null AS TIME_STARTED, null AS TIME_COMPLETED, m.created_at AS STUDENT_ENROLLMENT_DATE
                INTO OUTFILE '/tmp/report.csv'
                FIELDS TERMINATED BY ','
                ENCLOSED BY '&quot;'
                LINES TERMINATED BY '
                '
                FROM `lti_user` AS u INNER JOIN `lti_result` AS r ON u.user_id=r.user_id INNER JOIN `lti_link` AS l ON r.link_id=l.link_id INNER JOIN `lti_context` AS c ON l.context_id=c.context_id INNER JOIN `lti_membership` AS m ON u.user_id=m.user_id
            </pma:procedure>
            <pma:procedure name="POST_ENROLLMENT_PROC">
                CREATE DEFINER=`ltiuser`@`%` PROCEDURE `POST_ENROLLMENT_PROC`()
                BEGIN
                 CALL fci_operational.POST_PROCESSING();
                /*
                DECLARE termOne varchar(45);
                DECLARE termTwo varchar(45);
                DECLARE termThree varchar(45);
                DECLARE termFour varchar(45);
                
                SET termOne = (SELECT a.term_id FROM `fci_term` AS a WHERE DATE_FORMAT(NOW(), '%m') = SUBSTR(a.term_month_1, 1, 2) AND DATE_FORMAT(NOW(), '%Y') = SUBSTR(a.term_month_1, 3, 4));
                SET termTwo = (SELECT a.term_id FROM `fci_term` AS a WHERE DATE_FORMAT(NOW(), '%m') = SUBSTR(a.term_month_2, 1, 2) AND DATE_FORMAT(NOW(), '%Y') = SUBSTR(a.term_month_2, 3, 4));
                SET termThree = (SELECT a.term_id FROM `fci_term` AS a WHERE DATE_FORMAT(NOW(), '%m') = SUBSTR(a.term_month_3, 1, 2) AND DATE_FORMAT(NOW(), '%Y') = SUBSTR(a.term_month_3, 3, 4));
                SET termFour = (SELECT a.term_id FROM `fci_term` AS a WHERE DATE_FORMAT((NOW() - INTERVAL 1 MONTH), '%m') = SUBSTR(a.term_month_3, 1, 2) AND DATE_FORMAT((NOW() - INTERVAL 1 MONTH), '%Y') = SUBSTR(a.term_month_3, 3, 4));
                
                
                -- IF ((DATE_FORMAT(NOW(),'%H-%i') &gt;= 07-15) AND (DATE_FORMAT(NOW(),'%H-%i') &lt;= 08-15)) THEN
                
                -- UPDATE CONTEXT RECORDS WITH SIS_COURSE_CODE
                	UPDATE tsugi.lti_context a SET a.sis_course_code =
                    (SELECT b.external_id
                		FROM fci_course_xwalk b
                		WHERE a.lms_course_code LIKE
                		Concat('%',b.subject,REPLACE(REPLACE(REPLACE(b.course_number,'X',''),'x',''),'-','%SEC'),'%')
                		OR a.lms_course_code LIKE
                		Concat('%',b.subject,'_',REPLACE(REPLACE(REPLACE(b.course_number,'X',''),'x',''),'-','%SEC'),'%')
                		OR a.lms_course_code = b.course_number
                		AND
                		(
                			a.sis_course_code LIKE termOne
                	 	 OR a.sis_course_code LIKE termTwo
                	 	 OR a.sis_course_code LIKE termThree
                	 	 OR a.sis_course_code LIKE termFour
                		)
                		LIMIT 1
                	 )
                	 WHERE a.sis_course_code LIKE termOne
                	 OR a.sis_course_code LIKE termTwo
                	 OR a.sis_course_code LIKE termThree
                	 OR a.sis_course_code LIKE termFour;
                
                -- UPDATE RESULT RECORDS WITH SIS_ENROLLMENT_ID
                	UPDATE lti_result r SET r.sis_enrollment_id =(
                	  SELECT MAX(b.ext_course_id)
                		FROM lti_user a,
                			fci_sis_enrollments b,
                			lti_link d,
                			lti_context e
                		WHERE
                			(e.sis_course_code=b.course_id OR
                			 e.sis_course_code=Concat(b.course_id,'-',b.class_section) OR
                			 e.lms_course_code LIKE Concat('%',REPLACE(REPLACE(b.course_id,'X',''),'x',''),'%')
                			 )AND
                			(a.lms_defined_id IN(b.ext_student_id2,b.ext_student_id3)) AND
                			 b.transfer IS NULL AND
                			 r.user_id=a.user_id AND
                			 r.link_id=d.link_id AND
                			 d.context_id=e.context_id
                			 AND (
                				 SUBSTR(r.sis_enrollment_id, -4, 4) LIKE termOne
                				 OR SUBSTR(r.sis_enrollment_id, -4, 4) LIKE termTwo
                				 OR SUBSTR(r.sis_enrollment_id, -4, 4) LIKE termThree
                				 OR SUBSTR(r.sis_enrollment_id, -4, 4) LIKE termFour
                			 )
                		 GROUP BY a.lms_defined_id,b.course_id
                		 LIMIT 1
                		)
                	 WHERE EXISTS (
                		 SELECT 'X' FROM
                		 lti_user a,
                		 fci_sis_enrollments b,
                		 lti_link d,
                		 lti_context e
                		 		 WHERE
                		 (e.sis_course_code=b.course_id OR
                		 e.sis_course_code=Concat(b.course_id,'-',b.class_section) OR
                		 e.lms_course_code LIKE Concat('%',REPLACE(REPLACE(b.course_id,'X',''),'x',''),'%')
                		 ) AND
                		 (a.lms_defined_id IN(b.ext_student_id2,b.ext_student_id3)) AND
                		 b.transfer IS NULL AND
                		 r.user_id=a.user_id AND
                		 r.link_id=d.link_id AND
                		 d.context_id=e.context_id
                		 AND
                		 (
                			 SUBSTR(r.sis_enrollment_id, -4, 4) LIKE termOne
                			 OR SUBSTR(r.sis_enrollment_id, -4, 4) LIKE termTwo
                			 OR SUBSTR(r.sis_enrollment_id, -4, 4) LIKE termThree
                			 OR SUBSTR(r.sis_enrollment_id, -4, 4) LIKE termFour
                		 )
                		 GROUP BY a.lms_defined_id,b.course_id
                	)
                	AND
                	(
                		SUBSTR(r.sis_enrollment_id, -4, 4) LIKE termOne
                		OR SUBSTR(r.sis_enrollment_id, -4, 4) LIKE termTwo
                		OR SUBSTR(r.sis_enrollment_id, -4, 4) LIKE termThree
                		OR SUBSTR(r.sis_enrollment_id, -4, 4) LIKE termFour
                	);
                
                -- UPDATE RESULT RECORDS WITH FCI_STATE
                
                	UPDATE lti_result a SET a.fci_state = (
                		SELECT
                		CASE WHEN t.term_start_dt IS NULL THEN '0'
                		WHEN NOW() BETWEEN CONVERT(t.term_start_dt,DATETIME) AND CONVERT(Date_add(Date_add(t.term_start_dt,INTERVAL -1 day),INTERVAL 1 month),DATETIME) THEN '1'
                		WHEN NOW() BETWEEN CONVERT(t.term_start_dt,DATETIME) AND CONVERT(Date_add(Date_add(t.term_start_dt,INTERVAL -1 day),INTERVAL 2 month),DATETIME) THEN '2'
                		WHEN NOW() BETWEEN CONVERT(t.term_start_dt,DATETIME) AND CONVERT(Date_add(Date_add(t.term_start_dt,INTERVAL -1 day),INTERVAL 3 month),DATETIME) THEN '3'
                		WHEN Sysdate() &lt; t.term_start_dt THEN '4'
                		WHEN Sysdate() &gt; Date_add(Date_add(t.term_start_dt,INTERVAL -1 day),INTERVAL 3 month) THEN '5'
                		ELSE '0' end
                		FROM fci_term t WHERE t.term_id=Substr(a.sis_enrollment_id,-4,4)
                		LIMIT 1
                	)
                WHERE SUBSTR(a.sis_enrollment_id, -4, 4) LIKE termOne OR SUBSTR(a.sis_enrollment_id, -4, 4) LIKE termTwo OR SUBSTR(a.sis_enrollment_id, -4, 4) LIKE termThree OR SUBSTR(a.sis_enrollment_id, -4, 4) LIKE termFour;
                
                
                update lti_result a set a.fci_state = 3 where a.sis_enrollment_id in (select EXT_COURSE_ID from fci_sis_enrollments where LETTER_GRADE IN (&quot;PR&quot;, &quot;IP&quot;));
                */
                
                -- END IF;
                
                END
            </pma:procedure>
            <pma:procedure name="RESET_REPEAT_STUDENTS_PROC">
                CREATE DEFINER=`ltiuser`@`%` PROCEDURE `RESET_REPEAT_STUDENTS_PROC`()
                    NO SQL
                BEGIN
                
                UPDATE lti_result AS a, fci_result_history AS b
                JOIN lti_result USING (result_id)
                SET a.json = null,
                a.grade = null,
                b.reset_flag = 1
                WHERE a.user_updated &lt; (
                  SELECT c.term_start_dt
                  FROM fci_term AS c
                  WHERE c.term_id LIKE SUBSTRING(a.sis_enrollment_id, -4)
                );
                
                END
            </pma:procedure>
            <pma:procedure name="RUN_UPDATE_FCI_STATES">
                CREATE DEFINER=`ltiuser`@`%` PROCEDURE `RUN_UPDATE_FCI_STATES`()
                    MODIFIES SQL DATA
                BEGIN
                
                -- UPDATE RESULT RECORDS WITH FCI_STATE
                
                	UPDATE lti_result a SET a.fci_state = (
                		SELECT
                		CASE WHEN t.term_start_dt IS NULL THEN '0'
                		WHEN NOW() BETWEEN CONVERT(t.term_start_dt,DATETIME) AND CONVERT(Date_add(Date_add(t.term_start_dt,INTERVAL -1 day),INTERVAL 1 month),DATETIME) THEN '1'
                		WHEN NOW() BETWEEN CONVERT(t.term_start_dt,DATETIME) AND CONVERT(Date_add(Date_add(t.term_start_dt,INTERVAL -1 day),INTERVAL 2 month),DATETIME) THEN '2'
                		WHEN NOW() BETWEEN CONVERT(t.term_start_dt,DATETIME) AND CONVERT(Date_add(Date_add(t.term_start_dt,INTERVAL -1 day),INTERVAL 3 month),DATETIME) THEN '3'
                		WHEN Sysdate() &lt; t.term_start_dt THEN '4'
                		WHEN Sysdate() &gt; Date_add(Date_add(t.term_start_dt,INTERVAL -1 day),INTERVAL 3 month) THEN '5'
                		ELSE '0' end
                		FROM fci_term t WHERE t.term_id=Substr(a.sis_enrollment_id,-4,4)
                		LIMIT 1
                	);
                    
                
                UPDATE lti_result a SET a.fci_state = 3 WHERE a.sis_enrollment_id in (SELECT EXT_COURSE_ID FROM fci_sis_enrollments WHERE LETTER_GRADE IN (&quot;PR&quot;, &quot;IP&quot;));
                
                END
            </pma:procedure>
            <pma:procedure name="UPDATE_MONTHS_FROM_ID">
                CREATE DEFINER=`ltiuser`@`%` PROCEDURE `UPDATE_MONTHS_FROM_ID`()
                    NO SQL
                UPDATE tsugi.fci_month A SET 
                month_start_dt = DATE(CONCAT(substr(A.month_id,3,4),'-',substr(A.month_id,1,2),'-01')),
                month_end_dt = LAST_DAY(DATE(CONCAT(substr(A.month_id,3,4),'-',substr(A.month_id,1,2),'-01'))),
                sp_m1_start_dt = DATE_ADD(CONCAT(substr(A.month_id,3,4),'-',substr(A.month_id,1,2),'-01'), INTERVAL 1 DAY),
                day10_dt = DATE_ADD(CONCAT(substr(A.month_id,3,4),'-',substr(A.month_id,1,2),'-01'), INTERVAL 11 DAY),
                day17_dt = DATE_ADD(CONCAT(substr(A.month_id,3,4),'-',substr(A.month_id,1,2),'-01'), INTERVAL 16 DAY)
            </pma:procedure>
            <pma:procedure name="UPDATE_TERMS_FROM_ID">
                CREATE DEFINER=`ltiuser`@`%` PROCEDURE `UPDATE_TERMS_FROM_ID`()
                    NO SQL
                UPDATE tsugi.fci_term A SET
                A.term_name = DATE_FORMAT(CONCAT('20',SUBSTR(term_id,1,1)-4,SUBSTR(term_id,2,1),'-',SUBSTR(term_id,3,2),'-01'),'%M %Y'),
                A.term_month_1 =CONCAT(LPAD(SUBSTR(term_id,3,2),2,'0'),'20',SUBSTR(term_id,1,1)-4,SUBSTR(term_id,2,1)),
                A.term_month_2 =DATE_FORMAT(DATE_ADD(CONCAT('20',SUBSTR(term_id,1,1)-4,SUBSTR(term_id,2,1),'-',LPAD(SUBSTR(term_id,3,2),2,'0'),'-01'),INTERVAL 1 MONTH),'%m%Y'),
                A.term_month_3 =DATE_FORMAT(DATE_ADD(CONCAT('20',SUBSTR(term_id,1,1)-4,SUBSTR(term_id,2,1),'-',LPAD(SUBSTR(term_id,3,2),2,'0'),'-01'),INTERVAL 2 MONTH),'%m%Y'),
                A.term_start_dt = (SELECT B.sp_m1_start_dt FROM tsugi.fci_month B WHERE B.month_id = CONCAT(LPAD(SUBSTR(A.term_id,3,2),2,'0'),'20',SUBSTR(A.term_id,1,1)-4,SUBSTR(A.term_id,2,1))),
                A.term_end_dt = (SELECT B.month_end_dt FROM tsugi.fci_month B WHERE B.month_id = DATE_FORMAT(DATE_ADD(CONCAT('20',SUBSTR(term_id,1,1)-4,SUBSTR(term_id,2,1),'-',LPAD(SUBSTR(term_id,3,2),2,'0'),'-01'),INTERVAL 2 MONTH),'%m%Y')),
                A.sp_fci_m1_due_dt = (SELECT B.day10_dt FROM tsugi.fci_month B WHERE B.month_id = CONCAT(LPAD(SUBSTR(A.term_id,3,2),2,'0'),'20',SUBSTR(A.term_id,1,1)-4,SUBSTR(A.term_id,2,1))),
                A.sp_fci_m2_due_dt = (SELECT B.day17_dt FROM tsugi.fci_month B WHERE B.month_id = DATE_FORMAT(DATE_ADD(CONCAT('20',SUBSTR(term_id,1,1)-4,SUBSTR(term_id,2,1),'-',LPAD(SUBSTR(term_id,3,2),2,'0'),'-01'),INTERVAL 1 MONTH),'%m%Y')),
                A.sp_fci_m3_due_dt = (SELECT B.day17_dt FROM tsugi.fci_month B WHERE B.month_id = DATE_FORMAT(DATE_ADD(CONCAT('20',SUBSTR(term_id,1,1)-4,SUBSTR(term_id,2,1),'-',LPAD(SUBSTR(term_id,3,2),2,'0'),'-01'),INTERVAL 2 MONTH),'%m%Y'))
            </pma:procedure>
            <pma:event name="lti_nonce_auto">
                CREATE DEFINER=`ltiuser`@`%` EVENT `lti_nonce_auto` ON SCHEDULE EVERY 1 HOUR STARTS '2017-07-27 15:44:40' ON COMPLETION NOT PRESERVE ENABLE DO DELETE FROM lti_nonce WHERE created_at &lt; (UNIX_TIMESTAMP() - 3600)
            </pma:event>
        </pma:database>
    </pma:structure_schemas>
</pma_xml_export>